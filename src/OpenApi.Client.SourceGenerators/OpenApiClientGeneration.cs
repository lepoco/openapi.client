// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
// Copyright (C) Leszek Pomianowski and OpenAPI Client Contributors.
// All Rights Reserved.

namespace OpenApi.Client.SourceGenerators;

internal sealed class OpenApiClientGeneration
{
    /// <summary>
    /// The name of the generator (package) used to generate Open API Clients.
    /// </summary>
    public const string GeneratorName = "OpenApiClient";

    /// <summary>
    /// File header for generated Open API Client source files.
    /// </summary>
    public const string Header = """
        // <auto-generated/>
        // Generated with Open API Client Source Generator. Created by Leszek Pomianowski and OpenAPI Client Contributors.
        // Based on the OpenAPI specification and .NET Foundation guidelines.
        // See: https://github.com/lepoco/openapi.client
        #pragma warning disable
        #nullable enable

        """;

    /// <summary>
    /// The name of the marker attribute used to indicate that a class should have an Open API Client generated for it.
    /// </summary>
    public const string MarkerAttributeName = $"{GeneratorName}Attribute";

    /// <summary>
    /// The source code for the marker attribute that indicates a class should have an Open API Client generated for it.
    /// </summary>
    public const string MarkerAttributeSource =
            // language=cs
            $$$"""
            {{{Header}}}
            namespace OpenApi.Client
            {
                /// <summary>Library which API client should use at runtime.</summary>
                [global::System.CodeDom.Compiler.GeneratedCode("{{{GeneratorName}}}", "1.0.0")]
                internal enum OpenApiClientSerialization
                {
                    SystemTextJson,
                    NewtonsoftJson
                }

                /// <summary>Indicates that a given class should have an Open API Client generated for it.</summary>
                /// <remarks>Generated with Open API Client Source Generator. See: <see href="https://github.com/lepoco/openapi.client"/></remarks>
                [global::System.CodeDom.Compiler.GeneratedCode("{{{GeneratorName}}}", "1.0.0")]
                [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
                internal sealed class {{{MarkerAttributeName}}} : global::System.Attribute
                {
                    /// <summary>Initializes a new instance of the <see cref="{{{MarkerAttributeName}}}"/> class.</summary>
                    /// <param name="specification">The specification resource name for the Open API Client.</param>
                    /// <param name="operations">The list of operations to include in the Open API Client.</param>
                    /// <remarks>The specification is the name of the resource which is a yaml or json open api code.</remarks>
                    public {{{MarkerAttributeName}}}(string specification, params string[] operations)
                    {
                        Specification = specification;
                        Operations = operations;
                    }

                    /// <summary>The specification URL for the Open API Client.</summary>
                    public string Specification { get; }

                    /// <summary>A flag indicating whether to use the Service Collection for the Open API Client.</summary>
                    public OpenApiClientSerialization Serialization { get; set; } = OpenApiClientSerialization.SystemTextJson;

                    /// <summary>Directory relative to <c>specification</c> file in which the templates are located.</summary>
                    public string? Templates { get; set; }

                    /// <summary>List of operations to include in the Open API Client.</summary>
                    public string[] Operations { get; }

                    /// <summary>Whether the generated classes should use records.</summary>
                    public bool UseRecords { get; set; } = true;

                    /// <summary>Whether the generated properties should use nullable reference types.</summary>
                    public bool Nullable { get; set; } = true;
                }
            }
            """;
}
