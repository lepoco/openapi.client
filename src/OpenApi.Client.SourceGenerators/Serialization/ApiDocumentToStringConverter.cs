// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
// Copyright (C) Leszek Pomianowski and OpenAPI Client Contributors.
// All Rights Reserved.

using OpenApi.Client.SourceGenerators.Converters;
using OpenApi.Client.SourceGenerators.Schema;
using System.Collections.Generic;
using System.Text;

namespace OpenApi.Client.SourceGenerators.Serialization;

internal sealed class ApiDocumentToStringConverter(
    ApiDocument apiDocument,
    string namespaceName,
    string className
)
{
    private readonly string resultClassName = className + "Result";

    public string Convert()
    {
        StringBuilder builder = new("");

        builder.AppendLine("// <auto-generated/>");
        builder.AppendLine(
            "// Generated with Open API Client Source Generator. Created by Leszek Pomianowski and OpenAPI Client Contributors."
        );
        builder.AppendLine("#pragma warning disable");
        builder.AppendLine("#nullable enable");
        builder.Append("namespace ");
        builder.AppendLine(namespaceName);
        builder.AppendLine("{");

        GenerateResult(builder);

        builder.AppendLine();

        GenerateInterface(builder);

        builder.AppendLine();

        GenerateClass(builder);

        builder.AppendLine("}");

        return builder.ToString();
    }

    private void GenerateResult(StringBuilder builder)
    {
        builder.AppendLine("    /// <summary>Represents an error result from the API.</summary>");
        builder.Append("    public struct ");
        builder.Append(resultClassName);
        builder.AppendLine("Error");
        builder.AppendLine("    {");
        builder.AppendLine(
            "        /// <summary>Initializes a new instance of the error struct.</summary>"
        );
        builder.AppendLine("        /// <param name=\"message\">The error message.</param>");
        builder.Append("        public ");
        builder.Append(resultClassName);
        builder.AppendLine("Error(string? message)");
        builder.AppendLine("        {");
        builder.AppendLine("            Message = message;");
        builder.AppendLine("        }");
        builder.AppendLine();
        builder.AppendLine("        /// <summary>Gets the error message.</summary>");
        builder.AppendLine("        public string? Message { get; }");
        builder.AppendLine("    }");
        builder.AppendLine();

        builder.AppendLine("    /// <summary>Represents a result from the API.</summary>");
        builder.Append("    public class ");
        builder.AppendLine(resultClassName);
        builder.AppendLine("    {");
        builder.AppendLine(
            "        /// <summary>Initializes a new instance of the class.</summary>"
        );
        builder.AppendLine(
            "        /// <param name=\"statusCode\">The status code of the API call.</param>"
        );
        builder.Append("        public ");
        builder.Append(resultClassName);
        builder.AppendLine("(global::System.Net.HttpStatusCode? statusCode)");
        builder.AppendLine("        {");
        builder.AppendLine("            StatusCode = statusCode;");
        builder.Append("            Errors = new ");
        builder.Append(resultClassName);
        builder.AppendLine("Error[0];");
        builder.AppendLine("        }");
        builder.AppendLine();
        builder.AppendLine(
            "        /// <summary>Initializes a new instance of the class.</summary>"
        );
        builder.AppendLine(
            "        /// <param name=\"errors\">The errors of the API call.</param>"
        );
        builder.Append("        public ");
        builder.Append(resultClassName);
        builder.Append("(");
        builder.Append(resultClassName);
        builder.AppendLine("Error[] errors)");
        builder.AppendLine("        {");
        builder.AppendLine("            StatusCode = null;");
        builder.AppendLine("            Errors = errors;");
        builder.AppendLine("        }");
        builder.AppendLine();
        builder.AppendLine("        /// <summary>Gets the status code of the API call.</summary>");
        builder.AppendLine("        public global::System.Net.HttpStatusCode? StatusCode { get; }");
        builder.AppendLine();
        builder.AppendLine("        /// <summary>Gets the errors of the API call.</summary>");
        builder.Append("        ");
        builder.Append(resultClassName);
        builder.AppendLine("Error[] Errors { get; }");
        builder.AppendLine();
        builder.AppendLine(
            "        /// <summary>Gets a value indicating whether the API call has errors.</summary>"
        );
        builder.AppendLine("        public bool HasErrors => Errors.Length > 0;");
        builder.AppendLine();
        builder.AppendLine(
            "        /// <summary>Gets a value indicating whether the API call is successful.</summary>"
        );
        builder.AppendLine("        public bool IsSucceed => !HasErrors;");
        builder.AppendLine("    }");

        builder.AppendLine();

        builder.AppendLine(
            "    /// <summary>Represents a result from the API with a specific type.</summary>"
        );
        builder.Append("    public sealed class ");
        builder.Append(resultClassName);
        builder.Append("<TResult> : ");
        builder.AppendLine(resultClassName);
        builder.AppendLine("    {");
        builder.AppendLine("        private TResult? _result;");
        builder.AppendLine();
        builder.AppendLine(
            "        /// <summary>Initializes a new instance of the class.</summary>"
        );
        builder.Append("        public ");
        builder.Append(resultClassName);
        builder.AppendLine(
            "(TResult result, global::System.Net.HttpStatusCode? statusCode) : base(statusCode)"
        );
        builder.AppendLine("        {");
        builder.AppendLine("            _result = result;");
        builder.AppendLine("        }");
        builder.AppendLine();
        builder.AppendLine(
            "        /// <summary>Initializes a new instance of the class.</summary>"
        );
        builder.Append("        public ");
        builder.Append(resultClassName);
        builder.Append("(");
        builder.Append(resultClassName);
        builder.AppendLine("Error[] errors) : base(errors)");
        builder.AppendLine("        {");
        builder.AppendLine("        }");
        builder.AppendLine();
        builder.AppendLine("        /// <summary>Gets the result of the API call.</summary>");
        builder.AppendLine(
            "        public TResult Result => _result ?? throw new global::System.InvalidOperationException(\"Cannot retrieve API result if errors exist.\");"
        );
        builder.AppendLine("    }");
    }

    private void GenerateInterface(StringBuilder builder)
    {
        builder.Append("    /// <summary>An interface for the <c>");
        builder.Append(apiDocument.Info.Title); // TODO: Format, remove unsafe
        builder.AppendLine("</c> Open API Client.</summary>");
        builder.AppendLine(
            "    /// <remarks>Generated with Open API Client Source Generator. See: <see href=\"https://github.com/lepoco/openapi.client\"/></remarks>"
        );
        builder.Append("    public interface I");
        builder.AppendLine(className);
        builder.AppendLine("    {");
        builder.AppendLine(
            "        /// <summary>Gets the last status code from the HTTP request.</summary>"
        );
        builder.AppendLine("        global::System.Net.HttpStatusCode? GetLastStatusCode();");
        builder.AppendLine("");

        int count = 0;

        foreach (KeyValuePair<string, PathItem> path in apiDocument.Paths)
        {
            if (count > 0)
            {
                builder.AppendLine();
            }

            builder.Append("        /// <summary>");
            builder.Append(path.Value.Get.Summary); // TODO: Format, remove unsafe
            builder.Append("</summary>");
            builder.AppendLine();
            builder.Append("        global::System.Threading.Tasks.Task<");
            builder.Append(resultClassName);
            builder.Append("> ");
            builder.Append(PascalCaseConverter.Convert(path.Value.Get.OperationId));
            builder.Append("Async");
            builder.AppendLine("(global::System.Threading.CancellationToken cancellationToken);");

            count++;
        }

        builder.AppendLine("    }");
    }

    private void GenerateClass(StringBuilder builder)
    {
        builder.Append("    public partial class ");
        builder.Append(className);
        builder.Append(" : I");
        builder.AppendLine(className);
        builder.AppendLine("    {");
        builder.AppendLine(
            "        /// <summary>The HTTP Client used for the Open API Client.</summary>"
        );
        builder.AppendLine(
            "        internal readonly global::System.Net.Http.HttpClient HttpClient;"
        );
        builder.AppendLine();
        builder.AppendLine("        private global::System.Net.HttpStatusCode? lastStatusCode;");
        builder.AppendLine();
        builder.Append("        public ");
        builder.Append(className);
        builder.AppendLine("(HttpClient httpClient)");
        builder.AppendLine("        {");
        builder.AppendLine("            HttpClient = httpClient;");
        builder.AppendLine("        }");
        builder.AppendLine();
        builder.AppendLine("            /// <inheritdoc/>");
        builder.AppendLine("        public global::System.Net.HttpStatusCode? GetLastStatusCode()");
        builder.AppendLine("        {");
        builder.AppendLine("            return lastStatusCode;");
        builder.AppendLine("        }");
        builder.AppendLine();

        int count = 0;

        foreach (KeyValuePair<string, PathItem> path in apiDocument.Paths)
        {
            if (count > 0)
            {
                builder.AppendLine();
            }

            builder.Append("        /// <inheritdoc/>");
            builder.AppendLine();
            builder.Append("        public async global::System.Threading.Tasks.Task<");
            builder.Append(resultClassName);
            builder.Append("> ");
            builder.Append(PascalCaseConverter.Convert(path.Value.Get.OperationId));
            builder.Append("Async");
            builder.AppendLine("(global::System.Threading.CancellationToken cancellationToken)");
            builder.AppendLine("        {");
            builder.AppendLine("            try");
            builder.AppendLine("            {");
            builder.Append(
                "                using HttpResponseMessage response = await HttpClient.GetAsync(\""
            );
            builder.Append(path.Key);
            builder.AppendLine("\", cancellationToken);");
            builder.AppendLine(
                "                string responseBody = await response.Content.ReadAsStringAsync();"
            );
            builder.Append("                return new ");
            builder.Append(resultClassName);
            builder.AppendLine("(response.StatusCode);");
            builder.AppendLine("            }");
            builder.AppendLine("            catch (global::System.Exception e)");
            builder.AppendLine("            {");
            builder.Append("                return new ");
            builder.Append(resultClassName);
            builder.Append("(new ");
            builder.Append(resultClassName);
            builder.Append("Error[]{new ");
            builder.Append(resultClassName);
            builder.AppendLine("Error(e.Message)});");
            builder.AppendLine("            }");
            builder.AppendLine("        }");

            count++;
        }

        builder.AppendLine("    }");
    }
}
