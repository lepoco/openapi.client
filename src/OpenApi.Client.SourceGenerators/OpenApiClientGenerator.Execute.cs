// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
// Copyright (C) Leszek Pomianowski and OpenAPI Client Contributors.
// All Rights Reserved.

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using OpenApi.Client.SourceGenerators.Clients;
using System.Text;

namespace OpenApi.Client.SourceGenerators;

public partial class OpenApiClientGenerator
{
    internal static void Execute(OpenApiClient? clientToGenerate, SourceProductionContext context)
    {
        if (clientToGenerate is { } value)
        {
            context.AddSource($"{value.ClassName}.g.cs", SourceText.From(GeneratePartialClass(value), Encoding.UTF8));
        }
    }

    private static string GeneratePartialClass(OpenApiClient client)
    {
        return $$$"""
            // <auto-generated/>
            // Generated with Open API Client Source Generator. Created by Leszek Pomianowski and OpenAPI Client Contributors.
            // Selected specification: {{{client.Specification}}}
            // Dependency injection: {{{(client.UseDependencyInjection ? "yes" : "no")}}}
            #pragma warning disable
            #nullable enable
            namespace {{{client.Namespace}}}
            {
                {{{(client.UseDependencyInjection ? PrintDependencyInjection(client) : string.Empty)}}}
                /// <summary>An interface for the Open API Client.</summary>
                /// <remarks>Generated with Open API Client Source Generator. See: <see href="https://github.com/lepoco/openapi.client"/></remarks>
                public interface I{{{client.ClassName}}}
                {
                    /// <summary>Gets the last status code from the HTTP request.</summary>
                    public global::System.Net.HttpStatusCode? GetLastStatusCode();
                }

                /// <inheritdoc/>
                public partial class {{{client.ClassName}}} : I{{{client.ClassName}}}
                {
                    /// <summary>The HTTP Client used for the Open API Client.</summary>
                    internal readonly global::System.Net.Http.HttpClient HttpClient;

                    private const string JsonData = @"{{{client.JsonData}}}";

                    private global::System.Net.HttpStatusCode? lastStatusCode;

                    public {{{client.ClassName}}}(global::System.Net.Http.HttpClient httpClient)
                    {
                        HttpClient = httpClient;
                    }

                    /// <inheritdoc/>
                    public global::System.Net.HttpStatusCode? GetLastStatusCode()
                    {
                        return lastStatusCode;
                    }
                }
            }
            """;
    }

    private static string PrintDependencyInjection(OpenApiClient client)
    {

        return $$$"""
            using Microsoft.Extensions.DependencyInjection;

                public static class {{{client.ClassName}}}ServiceCollectionExtensions
                {
                    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection Add{{{client.ClassName}}}(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
                    {
                        services.AddHttpClient<global::{{{client.Namespace}}}.I{{{client.ClassName}}},global::{{{client.Namespace}}}.{{{client.ClassName}}}>();
                        services.AddTransient(typeof(global::{{{client.Namespace}}}.I{{{client.ClassName}}}), typeof(global::{{{client.Namespace}}}.{{{client.ClassName}}}));

                        return services;
                    }
                }

            """;
    }
}